variables:
  REGISTRY_URL: 'default.registry'
  REGISTRY_PROJECT: 'lottery'
  REGION: 'europe-west1'
  BRANCH: 'main'
  PROJECT: 'default'
  DEPLOY_GCP: 'false'
  DEPLOY_OFFICE: 'false'
  RELEASE: "false"

workflow:
  name: '$ENV $BRANCH $PROJECT $RUN_TEST'
  rules:
    - if: '$ENV == "project"'
      variables:
        REGISTRY_URL: 'eu.gcr.io'
        REGISTRY_PROJECT: 'project'
        REGION: 'europe-west1'
        DEPLOY_GCP: "true"
        NAMESPACE: "default"
    - if: '$ENV == "project2"'
      variables:
        REGISTRY_URL: 'registry.preprod'
        REGISTRY_PROJECT: 'project2'
        DEPLOY_OFFICE: "true"
        NAMESPACE: "lottery"
    - if: '$ENV == "project3"'
      variables:
        REGISTRY_URL: 'registry.prod'
        REGISTRY_PROJECT: 'project3'
        DEPLOY_OFFICE: "true"
        NAMESPACE: "lottery"
        RELEASE: "true"
    - if: '$ENV == "project4"'
      variables:
        REGISTRY_URL: 'eu.gcr.io'
        REGISTRY_PROJECT: 'project4'
        REGION: 'europe-west1'
        DEPLOY_GCP: "true"
        NAMESPACE: "default"
    - if: '$ENV == "project5"'
      variables:
        REGISTRY_URL: 'eu.gcr.io'
        REGISTRY_PROJECT: 'project5'
        REGION: 'europe-west1'
        DEPLOY_GCP: "true"
        NAMESPACE: "default"
    - if: '$ENV == "project6"'
      variables:
        REGISTRY_URL: 'eu.gcr.io'
        REGISTRY_PROJECT: 'project6'
        REGION: 'europe-west1'
        DEPLOY_GCP: "true"
        NAMESPACE: "default"

before_script:
  - ./deploy/docker-check-space.sh
  - echo "BRANCH name is $BRANCH. SERVICE name is $PROJECT. PROJECT name is $ENV"

stages:
  - build-gcp
  - build-dc
  - deploy-gcp
  - deploy-dc

build-gcp:
  stage: build-gcp
  script:
    - cd build/${PROJECT}
    - ./build.sh $PROJECT $ENV $BRANCH $REGISTRY_PROJECT $REGISTRY_URL
    - echo "${REGISTRY_URL}/${REGISTRY_PROJECT}/${PROJECT}:${BRANCH}-${CI_PIPELINE_ID}-$(cat ci_commit_sha-${PROJECT})"
  rules:
    - if: '$DEPLOY_GCP == "true"'
    - when: never
  artifacts:
    paths:
      - build/${PROJECT}/ci_commit_sha-${PROJECT}
  tags:
    - runner-tag

deploy-gcp:
  stage: deploy-gcp
  dependencies:
    - build-gcp
  script:
    - echo "${REGISTRY_URL}/${REGISTRY_PROJECT}/${PROJECT}:${BRANCH}-${CI_PIPELINE_ID}-$(cat build/${PROJECT}/ci_commit_sha-${PROJECT})" > deploy/images/${PROJECT}
    - cat deploy/images/${PROJECT}
    - gcloud container clusters get-credentials $REGISTRY_PROJECT-gke --region $REGION --project $REGISTRY_PROJECT
    #- kubectl get no
    #- helm template -f deploy/project/${ENV}/${PROJECT}/Chart.yaml deploy/
    - helm upgrade --install $PROJECT -n $NAMESPACE -f deploy/project/${ENV}/${PROJECT}/Chart.yaml  deploy/
    - kubectl rollout  status -n $NAMESPACE  $(kubectl get deployments.apps  -n $NAMESPACE  -l name=${PROJECT} -o name) --timeout=180s
  tags:
    - runner-tag
  rules:
    - if: '$RELEASE == "true" && $DEPLOY_GCP == "true"'
      when: manual
    - if: '$DEPLOY_GCP == "true"'
      when: on_success
    - when: never

build-dc:
  stage: build-dc
  script:
    - cd build/${PROJECT}
    - ./build.sh $PROJECT $ENV $BRANCH $REGISTRY_PROJECT $REGISTRY_URL
    - echo "${REGISTRY_URL}/${REGISTRY_PROJECT}/${PROJECT}:${BRANCH}-${CI_PIPELINE_ID}-$(cat ci_commit_sha-${PROJECT})"
    - ./../../deploy/git-release.sh  $PROJECT $ENV $BRANCH $REGISTRY_PROJECT $REGISTRY_URL $RELEASE
  rules:
    - if: '$DEPLOY_OFFICE == "true"'
    - when: never
  artifacts:
    paths:
      - build/${PROJECT}/ci_commit_sha-${PROJECT}
  tags:
    - office

deploy-dc:
  stage: deploy-dc
  dependencies:
    - build-dc
  script:
    - echo "${REGISTRY_URL}/${REGISTRY_PROJECT}/${PROJECT}:${BRANCH}-${CI_PIPELINE_ID}-$(cat build/${PROJECT}/ci_commit_sha-${PROJECT})" > deploy/images/${PROJECT}
    - cat deploy/images/${PROJECT}
    - export KUBECONFIG=~/.kube/$ENV
    #- kubectl get no && kubectl config current-context
    #- helm template -f deploy/project/${ENV}/${PROJECT}/Chart.yaml deploy/
    - helm upgrade --install $PROJECT -n $NAMESPACE -f deploy/project/${ENV}/${PROJECT}/Chart.yaml  deploy/
    - kubectl rollout  status -n $NAMESPACE  $(kubectl get deployments.apps  -n $NAMESPACE  -l name=${PROJECT} -o name) --timeout=180s
  tags:
    - office
  rules:
    - if: '$RELEASE == "true" && $DEPLOY_OFFICE == "true"'
      when: manual
    - if: '$DEPLOY_OFFICE == "true"'
      when: on_success
    - when: never

