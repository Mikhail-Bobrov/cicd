name: api-gateway
imagename: api-gateway
namespace: default


service:
  type: ClusterIP
  multiport: 
  - name: api-gateway
    port: 8080


deployment:
  podAntiAffinity: true
  replicas: 1
  imagePullSecrets:
    - gcr-json-key
  containers:
  - name: api-gateway
    imagename: api-gateway
    port: 8080
    probe:
      livenessProbe:
        enable: true
        probeType: http
        http:
          path: /actuator/health/liveness
          port: 8080
      readinessProbe:
        enable: true
        initialDelaySeconds: 10
        probeType: http
        http:
          path: /actuator/health/readiness
          port: 8080
    resources:
      requests:
        cpu: 5m
        memory: 1Gi
        ephemeral_storage: 1Gi
      limits:
        cpu: 500m
        ephemeral_storage: 2560Mi
        memory: 2560Mi
    restartPolicy: Always
    env: {}
    envFromSecret:
      JWT_KEY:
        jwt-qa: jwt-key
      DATASOURCE_BELLOTO_ADDRESS:
        postgres-default-qa-write: host
      DATASOURCE_BELLOTO_PORT:
        postgres-default-qa-write: port
      DATASOURCE_BELLOTO_USERNAME:
        postgres-default-qa-admin: superuser
      DATASOURCE_BELLOTO_PASSWORD:
        postgres-default-qa-admin: superuser-password
      KAFKA_ADDRESS:
        kafka-default-qa-write: host

ingress:
  enable: true
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/configuration-snippet: real_ip_header X-Forwarded-For; real_ip_recursive on;
    nginx.ingress.kubernetes.io/cors-allow-origin: '*'
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/server-snippet: if ($request_uri = /actuator/prometheus) { return 403; }
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  hosts:
  - host: mytestingress
    paths:
      - path: /
        pathType: Prefix
  tls:
  - hosts:
    - mytestingress
    secretName: default-ssl-secret


hpa:
  enable: false