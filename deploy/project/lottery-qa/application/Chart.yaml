name: application
imagename: application
namespace: default


service:
  type: ClusterIP
  multiport: 
  - name: application
    port: 8080


deployment:
  replicas: 1
  podAntiAffinity: true
  imagePullSecrets:
    - gcr-json-key
  containers:
  - name: application
    imagename: application
    port: 8080
    probe:
      livenessProbe:
        enable: true
        initialDelaySeconds: 300
        probeType: http
        http:
          path: /actuator/health/liveness
          port: 8080
      readinessProbe:
        enable: true
        initialDelaySeconds: 10
        probeType: http
        http:
          path: /actuator/health/readiness
          port: 8080
    resources:
      requests:
        cpu: 100m
        memory: 2Gi
      limits:
        cpu: 2
        memory: 3Gi
    restartPolicy: Always
    env: {}

    envFromSecret:
      JWT_KEY:
        jwt-qa: jwt-key
      DATASOURCE_BELLOTO_ADDRESS:
        postgres-default-qa-write: host
      DATASOURCE_BELLOTO_PORT:
        postgres-default-qa-write: port
      DATASOURCE_BELLOTO_USERNAME:
        postgres-default-qa-admin: superuser
      DATASOURCE_BELLOTO_PASSWORD:
        postgres-default-qa-admin: superuser-password
      DATASOURCE_BELLOTO-REPORT_ADDRESS:
        postgres-default-qa-write: host
      DATASOURCE_BELLOTO-REPORT_PORT:
        postgres-default-qa-write: port
      DATASOURCE_BELLOTO-REPORT_USERNAME:
        postgres-default-qa-admin: superuser
      DATASOURCE_BELLOTO-REPORT_PASSWORD:
        postgres-default-qa-admin: superuser-password
      KAFKA_ADDRESS:
        kafka-default-qa-write: host
      PAYMENT_WITHDRAW_PAYSTACK_SECRET_KEY:
        payment-paystack-default-qa: secretKey
      DATASOURCE_CLICKHOUSE_PASSWORD:
        clickhouse-default-qa-credentials: pwd-lottery-readonly
      DATASOURCE_CLICKHOUSE_USER:
        clickhouse-default-qa-credentials: pwd-lottery-readonly
      DATASOURCE_CLICKHOUSE_ADDRESS:
        clickhouse-default-qa-credentials: host

ingress:
  enable: true
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/cors-allow-origin: '*'
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/server-snippet: if ($request_uri = /actuator/prometheus) { return 403; }
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  hosts:
  - host: mytestingress
    paths:
      - path: /
        pathType: Prefix
  tls:
  - hosts:
    - mytestingress
    secretName: default-ssl-secret


hpa:
  enable: false
