name: gatekeeper
imagename: gatekeeper
namespace: default


service:
  type: ClusterIP
  multiport: 
  - name: gatekeeper
    port: 8080


deployment:
  replicas: 1
  imagePullSecrets:
    - gcr-json-key
  containers:
  - name: gatekeeper
    imagename: gatekeeper
    port: 8080
    probe:
      livenessProbe:
        enable: true
        initialDelaySeconds: 120
        probeType: http
        http:
          path: /actuator/health
          port: 8080
      readinessProbe:
        enable: true
        initialDelaySeconds: 30
        probeType: http
        http:
          path: /actuator/health
          port: 8080
    resources:
      requests:
        cpu: "100m"
        memory: 1Gi
      limits:
        cpu: "1"
        memory: 2Gi
    restartPolicy: Always
    env: {}
    envFromSecret:
      DATASOURCE_GATEKEEPER_PASSWORD:
        postgres-default-gatekeeper-admin: superuser-password
      DATASOURCE_GATEKEEPER_USERNAME:
        postgres-default-gatekeeper-admin: superuser


ingress:
  enable: true
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/cors-allow-origin: '*'
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: 3584m
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "2500"
    nginx.ingress.kubernetes.io/proxy-next-upstream-timeout: "2500"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3200"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3200"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  hosts:
  - host: mytestingress
    paths:
      - path: /
        pathType: Prefix
  tls:
  - hosts:
    - mytestingress
    secretName: default-ssl-secret

hpa:
  enable: false